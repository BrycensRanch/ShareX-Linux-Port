name: Build ShareX

on:
  push:
    branches:
      - "**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
    paths-ignore:
      - "**/*.md"
      - "**/*.gitignore"
      - "**/*.gitattributes"

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        configuration:
          - Release
          - Debug
        platform:
          - Any CPU

    env:
      SOLUTION_FILE_PATH: ShareX.sln
      ASSEMBLY_INFO_PATH: Directory.build.props

    outputs:
      APP_VERSION: ${{ env.APP_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Restore dependencies
        run: dotnet restore
#       Removed - I will add a .NET library that does this automatically.
#       NOTE: The attempted port of this to bash is borked. :3
#       The error I ran into: sed: -e expression #1, char 46: unknown option to `s'
#      - name: Set APP_VERSION
#        run: |
#          content=$(<"${{ env.ASSEMBLY_INFO_PATH }}")
#          pattern='<Version>([0-9]+(\.[0-9]+){1,3})</Version>'
#          version=$(echo "$content" | grep -Po "$pattern" | grep -Po '[0-9]+(\.[0-9]+){1,3}')
#
#          if [ "${GITHUB_REF}" = "refs/heads/develop" ]; then
#            version="${version}.${GITHUB_RUN_NUMBER}"
#            content=$(echo "$content" | sed -E "s/$pattern/<Version>$version<\/Version>/")
#            echo "$content" > "${{ env.ASSEMBLY_INFO_PATH }}"
#          fi
#
#          echo $version
#          echo "APP_VERSION=$version" >> $GITHUB_ENV

      - name: Build
        run: dotnet build "${{ env.SOLUTION_FILE_PATH }}" -c "${{ matrix.configuration }}" -p:Platform="${{ matrix.platform }}" --no-restore

      - name: Upload artifact (Debug)
        if: matrix.configuration == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: Debug
          path: Output
