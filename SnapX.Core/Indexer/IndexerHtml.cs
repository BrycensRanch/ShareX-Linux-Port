
// SPDX-License-Identifier: GPL-3.0-or-later


using System.Text;
using SnapX.Core.Utils;
using SnapX.Core.Utils.Miscellaneous;

namespace SnapX.Core.Indexer;

public class IndexerHtml : Indexer
{
    protected StringBuilder sbContent = new StringBuilder();
    protected int prePathTrim = 0;


    public string Index(string folderPath)
    {
        StringBuilder sbHtmlIndex = new StringBuilder();
        sbHtmlIndex.AppendLine("<!DOCTYPE html>");
        sbHtmlIndex.AppendLine(HtmlHelper.StartTag("html"));
        sbHtmlIndex.AppendLine(HtmlHelper.StartTag("head"));
        sbHtmlIndex.AppendLine("<meta charset=\"UTF-8\">");
        sbHtmlIndex.AppendLine("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
        sbHtmlIndex.AppendLine(HtmlHelper.Tag("title", "Index for " + Path.GetFileName(folderPath)));
        sbHtmlIndex.AppendLine(HtmlHelper.EndTag("head"));
        sbHtmlIndex.AppendLine(HtmlHelper.StartTag("body"));

        folderPath = Path.GetFullPath(folderPath).TrimEnd('\\');
        prePathTrim = folderPath.LastIndexOf(@"\") + 1;

        // FolderInfo folderInfo = GetFolderInfo(folderPath);
        // folderInfo.Update();

        // IndexFolder(folderInfo);
        string index = sbContent.ToString().Trim();

        sbHtmlIndex.AppendLine(index);
        sbHtmlIndex.AppendLine(HtmlHelper.EndTag("body"));
        sbHtmlIndex.AppendLine(HtmlHelper.EndTag("html"));
        return sbHtmlIndex.ToString().Trim();
    }

    protected override void IndexFolder(FolderInfo dir, int level = 0)
    {
        sbContent.AppendLine(GetFolderNameRow(dir, level));

        string divClass = level > 0 ? "FolderBorder" : "MainFolderBorder";
        sbContent.AppendLine(HtmlHelper.StartTag("div", "", $"class=\"{divClass}\""));

        if (dir.Files.Count > 0)
        {
            sbContent.AppendLine(HtmlHelper.StartTag("ul"));

            foreach (FileInfo fi in dir.Files)
            {
                sbContent.AppendLine(GetFileNameRow(fi));
            }

            sbContent.AppendLine(HtmlHelper.EndTag("ul"));
        }

        foreach (FolderInfo subdir in dir.Folders)
        {
            IndexFolder(subdir, level + 1);
        }

        sbContent.AppendLine(HtmlHelper.EndTag("div"));
    }

    private string GetFolderNameRow(FolderInfo dir, int level)
    {
        string folderNameRow = "";

        if (!dir.IsEmpty)
        {
            // if (settings.ShowSizeInfo)
            // {
            //     folderNameRow += dir.Size.ToSizeString(settings.BinaryUnits) + " ";
            // }

            folderNameRow += "(";

            if (dir.TotalFileCount > 0)
            {
                folderNameRow += dir.TotalFileCount.ToString("n0") + " file" + (dir.TotalFileCount > 1 ? "s" : "");
            }

            if (dir.TotalFolderCount > 0)
            {
                if (dir.TotalFileCount > 0)
                {
                    folderNameRow += ", ";
                }

                folderNameRow += dir.TotalFolderCount.ToString("n0") + " folder" + (dir.TotalFolderCount > 1 ? "s" : "");
            }

            folderNameRow += ")";
            folderNameRow = " " + HtmlHelper.Tag("span", folderNameRow, "", "class=\"FolderInfo\"");
        }

        string pathTitle;

        pathTitle = dir.FolderName;

        var heading = System.Math.Clamp(level + 1, 1, 6);

        return HtmlHelper.StartTag("h" + heading) + URLHelpers.HtmlEncode(pathTitle) + folderNameRow + HtmlHelper.EndTag("h" + heading);
    }

    private string GetFileNameRow(FileInfo fi)
    {
        string fileNameRow = HtmlHelper.StartTag("li") + URLHelpers.HtmlEncode(fi.Name);

        fileNameRow += HtmlHelper.EndTag("li");

        return fileNameRow;
    }

    private string GetFooter()
    {
        return $"Generated by <a href=\"{Links.Website}\">SnapX Directory Indexer</a> on {DateTime.UtcNow:yyyy-MM-dd 'at' HH:mm:ss 'UTC'}";
    }

}

